---
title: "Homework 3"
author: "[Insert your name here]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
#format: html
format: pdf
editor: 
  markdown: 
    wrap: 72
---

------------------------------------------------------------------------

::: {.callout-important style="font-size: 0.8em;"}
Please read the instructions carefully before submitting your
assignment.

1.  This assignment requires you to only upload a `PDF` file on Canvas
2.  Don't collapse any code cells before submitting.
3.  Remember to make sure all your code output is rendered properly
    before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter
before submitting your assignment ⚠️
:::

For this assignment, we will be using the [Wine
Quality](https://archive.ics.uci.edu/ml/datasets/wine+quality) dataset
from the UCI Machine Learning Repository. The dataset consists of red
and white *vinho verde* wine samples, from the north of Portugal. The
goal is to model wine quality based on physicochemical tests

We will be using the following libraries:

```{r}
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(car)
library(glmnet)
```

## <br><br><br><br>

## Question 1

::: callout-tip
## 50 points

Regression with categorical covariate and $t$-Test
:::

###### 1.1 (5 points)

Read the wine quality datasets from the specified URLs and store them in
data frames `df1` and `df2`.

```{r}
url1 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"

url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"


df1 <- read.csv(url1, sep = ";")
df2 <- read.csv(url2, sep = ";")
```

------------------------------------------------------------------------

###### 1.2 (5 points)

Perform the following tasks to prepare the data frame `df` for analysis:

1.  Combine the two data frames into a single data frame `df`, adding a
    new column called `type` to indicate whether each row corresponds to
    white or red wine.
2.  Rename the columns of `df` to replace spaces with underscores
3.  Remove the columns `fixed_acidity` and `free_sulfur_dioxide`
4.  Convert the `type` column to a factor
5.  Remove rows (if any) with missing values.

df\$fixed_acidity, free_sulfur_dioxide \<- Null, Null

```{r}
df1$type = 'white'
df2$type = 'red'

df <- rbind(df1, df2)

colnames(df) <- gsub(" ", "_", colnames(df))

df$type <- as.factor(df$type)

df <- df[, !(colnames(df) %in% c("fixed.acidity", "free.sulfur.dioxide"))]

df <- na.omit(df)

dim(df)

```

Your output to `R dim(df)` should be

```         
[1] 6497   11
```

------------------------------------------------------------------------

###### 1.3 (20 points)

Recall from STAT 200, the method to compute the $t$ statistic for the
the difference in means (with the equal variance assumption)

1.  Using `df` compute the mean of `quality` for red and white wine
    separately, and then store the difference in means as a variable
    called `diff_mean`.

2.  Compute the pooled sample variance and store the value as a variable
    called `sp_squared`.

3.  Using `sp_squared` and `diff_mean`, compute the $t$ Statistic, and
    store its value in a variable called `t1`.

```{r}
mean_r <- mean(df$quality[df$type == 'red']) 
mean_w <- mean(df$quality[df$type == 'white']) 

diff_mean <- c(mean_w, mean_r)
var_r <- var(df$quality[df$type == 'red'])
var_w <- var(df$quality[df$type == 'white'])

lr <- length(df$quality[df$type == 'red'])
lw <- length(df$quality[df$type == 'white'])

sp_squared <- ((lr - 1) * var_r + (lw-1) * var_w) / (lr + lw - 2)

t1 <- diff_mean/sqrt(sp_squared)

print(diff_mean)
print(sp_squared)
print(t1)
```

------------------------------------------------------------------------

###### 1.4 (10 points)

Equivalently, R has a function called `t.test()` which enables you to
perform a two-sample $t$-Test without having to compute the pooled
variance and difference in means.

Perform a two-sample t-test to compare the quality of white and red
wines using the `t.test()` function with the setting `var.equal=TRUE`.
Store the t-statistic in `t2`.

```{r}
t_test <- t.test(quality ~ type, data = df, var.equal = TRUE) # Insert your code here
t2 <-  t_test$statistic # Insert your code here

print(t2)
```

------------------------------------------------------------------------

###### 1.5 (5 points)

Fit a linear regression model to predict `quality` from `type` using the
`lm()` function, and extract the $t$-statistic for the `type`
coefficient from the model summary. Store this $t$-statistic in `t3`.

```{r}
fit <- lm(quality ~ type, data = df) # Insert your here
summary_lm <- summary(fit)
t3 <- summary_lm$coefficients["typewhite", "t value"]

print(t3)
```

------------------------------------------------------------------------

###### 1.6 (5 points)

Print a vector containing the values of `t1`, `t2`, and `t3`. What can
you conclude from this? Why?

```{r}
vec <- c(t1, t2, t3)
print(vec)# Insert your code here
```

because of the high absolute values of the results, that shows a strong
association with the response variables. Meaning the variance probably
has a strong impact on the response variables.

<br><br><br><br> <br><br><br><br> ---

## Question 2

::: callout-tip
## 25 points

Collinearity
:::

------------------------------------------------------------------------

###### 2.1 (5 points)

Fit a linear regression model with all predictors against the response
variable `quality`. Use the `broom::tidy()` function to print a summary
of the fitted model. What can we conclude from the model summary?

```{r}
# Insert your code here
library(broom)

lm_model <- lm(quality ~ ., data = df)

lm_summary <- tidy(lm_model)
print(lm_summary)

```

------------------------------------------------------------------------

###### 2.2 (10 points)

Fit two **simple** linear regression models using `lm()`: one with only
`citric_acid` as the predictor, and another with only
`total_sulfur_dioxide` as the predictor. In both models, use `quality`
as the response variable. How does your model summary compare to the
summary from the previous question?

```{r}
model_citric <- lm(quality ~ citric.acid, data = df)
 # Insert your code here
```

```{r}
model_sulfur <- lm(quality ~ total.sulfur.dioxide, data = df) # Insert your code here
print(summary(model_citric))
print(summary(model_sulfur))
```

------------------------------------------------------------------------

###### 2.3 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using
`corrplot()`

```{r}
library(corrplot)

dff <- df %>% select_if(is.numeric)

correlation_matrix <- cor(dff)

corrplot(correlation_matrix, method = "color") # Insert your code here
```

------------------------------------------------------------------------

###### 2.4 (5 points)

Compute the variance inflation factor (VIF) for each predictor in the
full model using `vif()` function. What can we conclude from this?

```{r}
lm_model <- lm(quality ~ ., data = df)

vif_values <- vif(lm_model)

print(vif_values) # Insert your code here
```

<br><br><br><br> <br><br><br><br> ---

## Question 3

::: callout-tip
## 40 points

Variable selection
:::

------------------------------------------------------------------------

###### 3.1 (5 points)

Run a backward stepwise regression using a `full_model` object as the
starting model. Store the final formula in an object called
`backward_formula` using the built-in `formula()` function in R

```{r}
full_model <- lm(quality ~ ., data = df)

backward_model <- step(full_model, direction = "backward")

backward_formula <- formula(backward_model)

print(backward_formula) # Insert your code here
```

------------------------------------------------------------------------

###### 3.2 (5 points)

Run a forward stepwise regression using a `null_model` object as the
starting model. Store the final formula in an object called
`forward_formula` using the built-in `formula()` function in R

```{r}
null_model <- lm(quality ~ 1, data = df)

forward_model <- step(null_model, direction = "forward")

forward_formula <- formula(forward_model)

print(forward_formula) # Insert your code here
```

------------------------------------------------------------------------

###### 3.3 (10 points)

1.  Create a `y` vector that contains the response variable (`quality`)
    from the `df` dataframe.

2.  Create a design matrix `X` for the `full_model` object using the
    `make_model_matrix()` function provided in the Appendix.

3.  Then, use the `cv.glmnet()` function to perform LASSO and Ridge
    regression with `X` and `y`.

```{r}
library(glmnet)
library(Matrix)  

y <- df$quality

X <- model.matrix(quality ~ ., data = df)

lasso_model <- cv.glmnet(x = X, y = y, alpha = 1)

ridge_model <- cv.glmnet(x = X, y = y, alpha = 0)

print(lasso_model)
print(ridge_model)
```

Create side-by-side plots of the ridge and LASSO regression results.
Interpret your main findings.

```{r}
par(mfrow=c(1, 2))

plot(lasso_model, main = "LASSO Regression")

plot(ridge_model, main = "Ridge Regression")
```

------------------------------------------------------------------------

###### 3.4 (5 points)

Print the coefficient values for LASSO regression at the `lambda.1se`
value? What are the variables selected by LASSO?

Store the variable names with non-zero coefficients in `lasso_vars`, and
create a formula object called `lasso_formula` using the
`make_formula()` function provided in the Appendix.

```{r}
coef_lasso <- coef(lasso_model, s = "lambda.1se")
print(coef_lasso)
lasso_vars <- rownames(coef_lasso)[-1]
lasso_vars <- lasso_vars[coef_lasso[-1,] != 0] 
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}
lasso_formula <- make_formula(lasso_vars)
lasso_formula
```

------------------------------------------------------------------------

###### 3.5 (5 points)

Print the coefficient values for ridge regression at the `lambda.1se`
value? What are the variables selected here?

Store the variable names with non-zero coefficients in `ridge_vars`, and
create a formula object called `ridge_formula` using the
`make_formula()` function provided in the Appendix.

```{r}
ridge_model$lambda1se
ridge_vars <- coef(ridge_model)
print(ridge_vars)
ridge_formula <- make_formula(rownames(ridge_vars)[-1])
ridge_formula

```

------------------------------------------------------------------------

###### 3.6 (10 points)

What is the difference between stepwise selection, LASSO and ridge based
on you analyses above?

<br><br><br><br> <br><br><br><br> ---

## Question 4

::: callout-tip
## 70 points

Variable selection
:::

------------------------------------------------------------------------

###### 4.1 (5 points)

Excluding `quality` from `df` we have $10$ possible predictors as the
covariates. How many different models can we create using any subset of
these $10$ coavriates as possible predictors? Justify your answer.

------------------------------------------------------------------------

###### 4.2 (20 points)

Store the names of the predictor variables (all columns except
`quality`) in an object called `x_vars`.

```{r}
x_vars <- colnames(df)[!colnames(df) %in% "quality"]

```

Use:

-   the `combn()` function (built-in R function) and
-   the `make_formula()` (provided in the Appendix)

to **generate all possible linear regression formulas** using the
variables in `x_vars`. This is most optimally achieved using the `map()`
function from the `purrr` package.

```{r}
make_formula <- function(variables) {
  as.formula(paste("quality ~", paste(variables, collapse = " + ")))
}

formulas <- map(
  1:length(x_vars),
  \(x){
    vars <- combn(x_vars, x, simplify = FALSE)
    map(vars, make_formula)
  }
) %>% unlist()
```

If your code is right the following command should return something
along the lines of:

```{r}
sample(formulas, 4) %>% as.character()
# Output:
# [1] "quality ~ volatile_acidity + residual_sugar + density + pH + alcohol"                                                 
# [2] "quality ~ citric_acid"                                                                                                
# [3] "quality ~ volatile_acidity + citric_acid + residual_sugar + total_sulfur_dioxide + density + pH + sulphates + alcohol"
# [4] "quality ~ citric_acid + chlorides + total_sulfur_dioxide + pH + alcohol + type"  
```

------------------------------------------------------------------------

###### 4.3 (10 points)

Use `map()` and `lm()` to fit a linear regression model to each formula
in `formulas`, using `df` as the data source. Use `broom::glance()` to
extract the model summary statistics, and bind them together into a
single tibble of summaries using the `bind_rows()` function from
`dplyr`.

```{r}
models <- map(formulas, ~lm(.x, data = df)) # Insert your code here
summaries <- map(models, glance) # Insert your code here

```

------------------------------------------------------------------------

###### 4.4 (5 points)

Extract the `adj.r.squared` values from `summaries` and use them to
identify the formula with the ***highest*** adjusted R-squared value.

```{r}
 # Insert your code here
adj_r_squared_values <- sapply(summaries, function(summary) summary$adj.r.squared)

best_formula_index <- which.max(adj_r_squared_values)

best_adj_r_squared_formula <- formulas[best_formula_index]

```

Store resulting formula as a variable called `rsq_formula`.

```{r}
best_formula_index <- which.max(adj_r_squared_values)
rsq_formula <- formulas[best_formula_index]  # Insert your code
```

------------------------------------------------------------------------

###### 4.5 (5 points)

Extract the `AIC` values from `summaries` and use them to identify the
formula with the ***lowest*** AIC value.

```{r}
aic_values <- sapply(summaries, function(summary) summary$AIC)

best_formula_index <- which.min(aic_values)

best_aic_formula <- formulas[best_formula_index] # Insert your code here
```

Store resulting formula as a variable called `aic_formula`.

```{r}
best_formula_index <- which.min(aic_values)
aic_formula <- formulas[best_formula_index] # Insert your code
```

------------------------------------------------------------------------

###### 4.6 (15 points)

Combine all formulas shortlisted into a single vector called
`final_formulas`.

```{r}
null_formula <- formula(null_model)
full_formula <- formula(full_model)

final_formulas <- c(
  null_formula,
  full_formula,
  backward_formula,
  forward_formula,
  lasso_formula, 
  ridge_formula,
  rsq_formula,
  aic_formula
)
```

-   Are `aic_formula` and `rsq_formula` the same? How do they differ
    from the formulas shortlisted in question 3?

-   Which of these is more reliable? Why?

-   If we had a dataset with $10,000$ columns, which of these methods
    would you consider for your analyses? Why?

------------------------------------------------------------------------

###### 4.7 (10 points)

Use `map()` and `glance()` to extract the
`sigma, adj.r.squared, AIC, df`, and `p.value` statistics for each model
obtained from `final_formulas`. Bind them together into a single data
frame `summary_table`. Summarize your main findings.

```{r}
summary_table <- map(
  final_formulas, 
  ~ glance(.x) %>% 
    select(sigma, adj.r.squared, AIC, df, p.value)
) %>% 
  bind_rows()

summary_table %>% knitr::kable()

# I keep getting an error and I dont know how to fix it.
```

::: {.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br> <br><br><br><br> ---

# Appendix

#### Convenience function for creating a formula object

The following function which takes as input a vector of column names `x`
and outputs a `formula` object with `quality` as the response variable
and the columns of `x` as the covariates.

```{r}
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}
```

#### Convenience function for `glmnet`

The `make_model_matrix` function below takes a `formula` as input and
outputs a **rescaled** model matrix `X` in a format amenable for
`glmnet()`

```{r}
make_model_matrix <- function(formula){
  X <- model.matrix(formula, df)[, -1]
  cnames <- colnames(X)
  for(i in 1:ncol(X)){
    if(!cnames[i] == "typewhite"){
      X[, i] <- scale(X[, i])
    } else {
      colnames(X)[i] <- "type"
    }
  }
  return(X)
}
```

::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::
